-- Test: TEST0106 (Executor)
-- @@@ START COPYRIGHT @@@
--
-- (C) Copyright 2002-2014 Hewlett-Packard Development Company, L.P.
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
--
-- @@@ END COPYRIGHT @@@
--
-- Functionality: SQL Query Cancel
-- Expected files: EXPECTED106
-- Table created:
-- Limitations:
-- To do:
-- Revision history:

cqd HIST_NO_STATS_FORCE_LABEL_ROWCOUNT_READ 'OFF';
#ifdef SEABASE_CANCEL
obey TEST106(dump_repos);

obey TEST106(clnup);
sh echo > cumulative_GET_STATS106; 

log LOG106 clear;
obey TEST106(setup);
control query default HIST_USE_SAMPLE_FOR_CARDINALITY_ESTIMATION  'OFF';
#endif 
obey TEST106(dml);
#ifdef SEABASE_CANCEL
obey TEST106(privs);
select 'FUNKY_OPT_UNIQUE', 
  ts, msg from T106_interleaved_log order by ts;
obey TEST106(clnup);
#endif
log;

--After the test, wait 60 seconds and dump rows from repos.
sh sh ./runmxci.ksh -i"GET_REPOS_106" > /dev/null &;

exit;

?section dump_repos
-- This section will get any events logged into the repos 
-- from runtimestats or ex_root after the test starts.  The 
-- purpose it to allow post-hoc analysis of test failures.

log SELECT_REPOS_106 clear;
select 'select PROCESS_ID, GEN_TS_LCT, cast ( substr (MESSAGETEXT, 1, 240) as char(240)) from MANAGEABILITY.INSTANCE_REPOSITORY.EVENT_SQLINFO_1 where GEN_TS_LCT > timestamp ''' , CURRENT_TIMESTAMP, ''' and EVENT_ID = 109000508 and (FILENAME like ''%runtimestats%'' or FILENAME like ''%ex_root.cpp'') order by GEN_TS_LCT;'
from (values(0)) as t1;
log;
sh echo "sh sleep 60;" > GET_REPOS_106;
sh echo "log DUMP_REPOS_106 clear;" >> GET_REPOS_106;
sh grep "^select" SELECT_REPOS_106 >> GET_REPOS_106;
sh echo "log;" >> GET_REPOS_106;

?section clnup

drop table T106a;
drop table T106_synch_cancel;
drop table T106_synch_lock;
drop table T106_interleaved_log;

-- These should already be removed but just in case
revoke role DB__USERADMIN from sql_user5;
revoke component privilege QUERY_ACTIVATE on SQL_OPERATIONS from sql_user7;
revoke role exetest106 from sql_user7;
revoke component privilege QUERY_ACTIVATE on SQL_OPERATIONS from exetest106;
drop role exetest106;

?section setup

create table T106_interleaved_log (
                   ts time(6) not null,
                   msg char(60) ) no partition;
 

create table T106_synch_cancel (a int not null,
                    b int not null,
                    ts time(6) not null,
                      primary key(a)
                      ) no partition;

create table T106_synch_lock (a int not null,
                    b int not null,
                    ts time(6) not null,
                      primary key(a)
                      ) no partition;

create table T106a
  (uniq int not null,
   c10K int ,
   c1K   int,
   c100  int,
   c10   int,
   c1    int,
   primary key (uniq)
  );

insert into T106_synch_cancel values (1, 1, CURRENT_TIME(6));

insert into T106a
  select
  0 + (100000 * x100000) + (10000 * x10000) + (1000 * x1000) + (100 * x100) + (10 * x10) +( 1 * x1),
  0 + (1000 * x1000) + (100 * x100) + (10 * x10) + (1 * x1),
  0 + (100 * x100) + (10 * x10) + (1 * x1),
  0 + (10 * x10) + (1 * x1),
  0 + (1 * x1),
  0
  from (values(1)) as t1
    transpose 0,1                 as x100000
    transpose 0,1,2,3,4,5,6,7,8,9 as x10000
    transpose 0,1,2,3,4,5,6,7,8,9 as x1000
    transpose 0,1,2,3,4,5,6,7,8,9 as x100
    transpose 0,1,2,3,4,5,6,7,8,9 as x10
    transpose 0,1,2,3,4,5,6,7,8,9 as x1
  ;

delete from T106_synch_cancel;

control query default HIST_MISSING_STATS_WARNING_LEVEL '0';

?section dml

#ifdef SEABASE_CANCEL
sh rm cancel_cmd cancel_log106_all LOCK_LOG106;

control query default STREAM_TIMEOUT '12000';
set envvar sqlci_cursor;
declare cancel_sync_cursor cursor for select 
 'pubsub sync FUNKY_OPT_UNIQUE', b, ts from 
 stream(T106_synch_cancel) as t1 for read uncommitted access;

declare lock_sync_cursor cursor for select 
 'pubsub sync lock FUNKY_OPT_UNIQUE', b, ts from 
 stream(T106_synch_lock) as t1 for read uncommitted access;

--obey TEST106(cursor_close_early);

obey TEST106(uniq_query_test);

obey TEST106(positive_test1);

set session default CANCEL_QUERY_ALLOWED 'OFF';

obey TEST106(positive_test1);

set session default CANCEL_QUERY_ALLOWED 'ON';

obey TEST106(positive_test2);

set session default CANCEL_QUERY_ALLOWED 'OFF';

obey TEST106(positive_test2);

set session default CANCEL_QUERY_ALLOWED 'ON';

obey TEST106(cpu_bound_esps);

obey TEST106(escalation1);

obey TEST106(positive_test1_pname);

obey TEST106(positive_test2_pname);

obey TEST106(cpu_bound_esps_pname);

obey TEST106(escalation1_pname);

obey TEST106(positive_test1_nid_pid);

obey TEST106(positive_test2_nid_pid);

obey TEST106(cpu_bound_esps_nid_pid);

obey TEST106(escalation1_nid_pid);
#endif

obey TEST106(showplan1);

obey TEST106(showplan2);

obey TEST106(explain1);

obey TEST106(invalid_qid);

obey TEST106(invalid_pname);

obey TEST106(invalid_nid_pid);

#ifdef SEABASE_CANCEL
obey TEST106(qc1314);

obey TEST106(qc1351);
#endif

?section cursor_close_early
-- From bug 2583

set envvar sqlci_cursor '1';

declare c1 cursor for select * from t106a A, t106a B;

open c1;
close c1;

open c1;
close c1;

open c1;
close c1;

?section uniq_query_test
-- By default, cannot cancel unique queries:

---------- unique select query ---------------------

prepare s1 from select 'unique query row' from t106a where uniq = 44;

obey TEST106(make_cancel_stmt);

sh sh ./runmxci.ksh -i"TEST106(lock_t106a)" & ;

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

obey TEST106(synch_cancel);

obey TEST106(synch_lock);

insert into T106_interleaved_log values
(CURRENT_TIME (6),
'unique select query, execute s1, start');

execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'unique select query, execute s1, finish');

delete from T106_synch_lock;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

---------- unique delete query ---------------------

prepare s1 from delete from t106a where uniq = 44;

obey TEST106(make_cancel_stmt);

sh sh ./runmxci.ksh -i"TEST106(lock_t106a)" & ;

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

obey TEST106(synch_cancel);

obey TEST106(synch_lock);

insert into T106_interleaved_log values
(CURRENT_TIME (6),
'unique delete query, execute s1, start');

execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'unique delete query, execute s1, finished');

delete from T106_synch_lock;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

---------- unique update query ---------------------

prepare s1 from update t106a set c10k = 12 where uniq = 46;

obey TEST106(make_cancel_stmt);

sh sh ./runmxci.ksh -i"TEST106(lock_t106a)" & ;

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

obey TEST106(synch_cancel);

obey TEST106(synch_lock);

insert into T106_interleaved_log values
(CURRENT_TIME (6),
'unique update query, execute s1, start');

execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6),
'unique update query, execute s1, finished');

delete from T106_synch_lock;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

---------- unique insert query ---------------------

prepare s1 from insert into t106a values (44, 2, 3, 4, 5, 6);

obey TEST106(make_cancel_stmt);

sh sh ./runmxci.ksh -i"TEST106(lock_t106a)" & ;

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

obey TEST106(synch_cancel);

obey TEST106(synch_lock);

insert into T106_interleaved_log values
(CURRENT_TIME (6),
'unique insert query, execute s1, start');

execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6),
'unique insert query, execute s1, finish');

delete from T106_synch_lock;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section positive_test1

-- Test canceling a query with and without the 
-- CANCEL_QUERY_ALLOWED.

------- long running, cpu-bound select query -------

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
control query default ATTEMPT_ESP_PARALLELISM 'off';

prepare s1 from select count(*) from t106a A, t106a B 
where A.uniq < 3000;

control query default ATTEMPT_ESP_PARALLELISM 'system';
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_stmt);

select 'subject launch canceler - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

select 'subject synch cancel - FUNKY_OPT_UNIQUE',
CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1, launch canceler, finish');

obey TEST106(synch_cancel);

select 'subject execute s1 - FUNKY_OPT_UNIQUE',
CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1, execute, start');

execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1, execute, finished');

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section positive_test2

-- Test canceling a query with and without the 
-- CANCEL_QUERY_ALLOWED.

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';

control query shape expr(sort_groupby(esp_exchange(cut)));

prepare s1 from select count(*) from t106a A, t106a B 
where A.uniq < 3000;

control query shape cut;

control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2, launch canceler, finished');

obey TEST106(synch_cancel);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2, execute s1, start');

------- long running, cpu-bound select query -------
execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2, execute s1, finished');

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section cpu_bound_esps

-- Test cancel when esps are CPU-bound.

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
prepare s1 from select C.c10k, count(*) from t106a A, t106a B, t106a C
group by c.c10k order by 2;
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps, launch canceler, finished');

obey TEST106(synch_cancel);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps, execute s1, start');

execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps, execute s1, finished');

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section escalation1

-- Test cancel escalation.  Simulate unresponsive ESPs with COMP_INT_39.

control query default COMP_INT_39 '4';
control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
prepare s1 from select C.c10k, count(*) from t106a A, t106a B, t106a C
group by c.c10k order by 2;
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';
control query default COMP_INT_39 'reset';

obey TEST106(make_cancel_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1, launch canceler, finished');

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1, execute s1, start');

execute s1;

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1, execute s1, finished');

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section positive_test1_nid_pid

-- Test canceling a query with and without the 
-- CANCEL_QUERY_ALLOWED.

------- long running, cpu-bound select query -------

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
control query default ATTEMPT_ESP_PARALLELISM 'off';

prepare s1 from select count(*) from t106a A, t106a B 
where A.uniq < 3000;

control query default ATTEMPT_ESP_PARALLELISM 'system';
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_nid_pid_stmt);

select 'subject launch canceler - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_nid_pid, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_nid_pid)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_nid_pid, launch canceler, finished');

select 'subject synch cancel - FUNKY_OPT_UNIQUE',
CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

select 'subject execute s1 - FUNKY_OPT_UNIQUE',
CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_nid_pid, execute s1, start');

execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_nid_pid, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section positive_test2_nid_pid

-- Test canceling a query with and without the 
-- CANCEL_QUERY_ALLOWED.

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';

control query shape expr(sort_groupby(esp_exchange(cut)));

prepare s1 from select count(*) from t106a A, t106a B 
where A.uniq < 3000;

control query shape cut;

control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_nid_pid_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_nid_pid, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_nid_pid)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_nid_pid, launch canceler, finished');

obey TEST106(synch_cancel);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_nid_pid, execute s1, start');

------- long running, cpu-bound select query -------
execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_nid_pid, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section cpu_bound_esps_nid_pid

-- Test cancel when esps are CPU-bound.

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
prepare s1 from select C.c10k, count(*) from t106a A, t106a B, t106a C
group by c.c10k order by 2;
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_nid_pid_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_nid_pid, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_nid_pid)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_nid_pid, launch canceler, finished');

obey TEST106(synch_cancel);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_nid_pid, execute s1, start');

execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_nid_pid, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section escalation1_nid_pid

-- Test cancel escalation.  Simulate unresponsive ESPs with COMP_INT_39.

control query default COMP_INT_39 '4';
control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
prepare s1 from select C.c10k, count(*) from t106a A, t106a B, t106a C
group by c.c10k order by 2;
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';
control query default COMP_INT_39 'reset';

obey TEST106(make_cancel_nid_pid_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_nid_pid, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_nid_pid)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_nid_pid, launch canceler, finished');

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_nid_pid, execute s1, start');

execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_nid_pid, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section positive_test1_pname

-- Test canceling a query with and without the 
-- CANCEL_QUERY_ALLOWED.

------- long running, cpu-bound select query -------

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
control query default ATTEMPT_ESP_PARALLELISM 'off';

prepare s1 from select count(*) from t106a A, t106a B 
where A.uniq < 3000;

control query default ATTEMPT_ESP_PARALLELISM 'system';
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_pname_stmt);

select 'subject launch canceler - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_pname, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_pname)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_pname, launch canceler, finished');

select 'subject synch cancel - FUNKY_OPT_UNIQUE',
CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

select 'subject execute s1 - FUNKY_OPT_UNIQUE',
CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_pname, execute s1, start');

execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test1_pname, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section positive_test2_pname

-- Test canceling a query with and without the 
-- CANCEL_QUERY_ALLOWED.

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';

control query shape expr(sort_groupby(esp_exchange(cut)));

prepare s1 from select count(*) from t106a A, t106a B 
where A.uniq < 3000;

control query shape cut;

control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_pname_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_pname, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_pname)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_pname, launch canceler, finished');

obey TEST106(synch_cancel);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_pname, execute s1, start');

------- long running, cpu-bound select query -------
execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'positive_test2_pname, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section cpu_bound_esps_pname

-- Test cancel when esps are CPU-bound.

control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
prepare s1 from select C.c10k, count(*) from t106a A, t106a B, t106a C
group by c.c10k order by 2;
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';

obey TEST106(make_cancel_pname_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_pname, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_pname)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_pname, launch canceler, finished');

obey TEST106(synch_cancel);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_pname, execute s1, start');

execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'cpu_bound_esps_pname, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section escalation1_pname

-- Test cancel escalation.  Simulate unresponsive ESPs with COMP_INT_39.

control query default COMP_INT_39 '4';
control query default QUERY_LIMIT_SQL_PROCESS_CPU '20';
prepare s1 from select C.c10k, count(*) from t106a A, t106a B, t106a C
group by c.c10k order by 2;
control query default QUERY_LIMIT_SQL_PROCESS_CPU 'reset';
control query default COMP_INT_39 'reset';

obey TEST106(make_cancel_pname_stmt);

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_pname, launch canceler, start');

sh sh ./runmxci.ksh -i"TEST106(do_cancel_pname)" & ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_pname, launch canceler, finished');

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_pname, execute s1, start');

execute s1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'escalation1_pname, execute s1, finished');

select 'subject - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;

obey TEST106(synch_cancel);

obey TEST106(append_cancel_log);

?section showplan1

log; log SP106 clear;

showplan control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

showplan control query activate qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

showplan control query suspend qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

showplan control query suspend qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1, force;

showplan control query cancel pid 0, 17677;

showplan control query cancel pid $Z00034G;

log;

sh echo "cancel-specific showplan output"   >> LOG106; 
sh grep "Contents of EX_CANCEL" SP106       >> LOG106;
sh grep "For ComTdbCancel" SP106            >> LOG106;
sh grep "^qid_ =" SP106                     >> LOG106;
sh grep "^action_ =" SP106                  >> LOG106;
sh grep "^cancelNid_" SP106                 >> LOG106;
sh grep "^cancelPname_" SP106               >> LOG106;
sh grep "^comment_ =" SP106                 >> LOG106;

log LOG106;

?section showplan2

log; log SP106 clear;

showplan control query default TIMEOUT '600';

log;

sh echo "control query default showplan output"       >> LOG106;
sh grep "Contents of EX_CONTROL"                SP106 >> LOG106;
sh grep "# of Expressions" SP106 | tail -n 1          >> LOG106;

log LOG106;


?section explain1

log; log EXPLAIN106 clear;

explain control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

explain control query suspend qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

explain control query suspend qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1, force;

explain control query activate qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

explain control query cancel pid 0, 17677;

explain control query cancel pid $Z00034G;


log;

sh echo "cancel-specific explain output"   >> LOG106; 
sh grep "CONTROL_RUNNING_QUERY" EXPLAIN106 >> LOG106; 
sh grep "control_action"        EXPLAIN106 >> LOG106; 
sh grep "nid_pid"               EXPLAIN106 >> LOG106; 
sh grep "min_blocking_interval" EXPLAIN106 >> LOG106; 
sh grep "process_name"          EXPLAIN106 >> LOG106; 


log LOG106;

?section invalid_qid
control query cancel qid foo;

set envvar HP_FAKE_ERROR_2024;

control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

set envvar HP_FAKE_ERROR_8142;

control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

reset envvar HP_FAKE_ERROR_2024;

reset envvar HP_FAKE_ERROR_8142;

control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

set envvar HP_FAKE_ERROR_8028;

control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

reset envvar HP_FAKE_ERROR_8028;

control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

set envvar HP_FAKE_ERROR_201;

control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

reset envvar HP_FAKE_ERROR_201;

control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

control query suspend qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

control query suspend qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1, force;

control query activate qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;

?section invalid_pname
control query cancel pid $ZXXXXX;

?section invalid_nid_pid
control query cancel pid 44,66666;

?section qc1314

-- Test case for QC 1314.  Exercise IPC timeout in 
-- ex_root_tcb::cancel.

set envvar SQLMX_CANCEL_TIMEOUT '10';

-- Simulate unresponsive ESPs with COMP_INT_39.

control query default COMP_INT_39 '4';

set envvar sqlci_cursor '1';

control query shape esp_exchange(cut);

declare c1 cursor for
select C.c10k, count(*) from t106a A, t106a B, t106a C
group by c.c10k order by 2
for read uncommitted access;

control query shape cut;

control query default COMP_INT_39 'reset';

open c1;

close c1;

open c1;

close c1;

open c1;

close c1;

open c1;

close c1;

open c1;

close c1;

?section qc1351
log LOG106;
prepare s1 from select * from t106a;
obey TEST106(make_cancel_stmt);
obey cancel_cmd;

?section synch_cancel

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'foreground awaits synch_cancel');

-- wait until other mxci is ready, using pubsub.
open cancel_sync_cursor;
fetch cancel_sync_cursor;
close cancel_sync_cursor;
select 'done with cancel_sync_cursor - FUNKY_OPT_UNIQUE', 
       CURRENT_TIME (6) from (values (1)) as t1;
log;
delete from T106_synch_cancel;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'foreground finished synch_cancel');

log LOG106;

?section synch_lock

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'foreground awaits synch_lock');

-- wait until other mxci is ready, using pubsub.
open lock_sync_cursor;
fetch lock_sync_cursor;
close lock_sync_cursor;
select 'done with lock_sync_cursor - FUNKY_OPT_UNIQUE',
       CURRENT_TIME (6) from (values (1)) as t1;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'foreground finished synch_lock');

?section do_cancel
log CANCEL_LOG106 clear;
------------------------------------------;
------ Contents of cancel session --------;
------------------------------------------;
insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel has begun');

insert into t106_synch_cancel values( 99, 101, CURRENT_TIME(6));

select 'canceler going to sleep - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

sh sleep 13;

select 'canceler woke up - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

set session default CANCEL_ESCALATION_INTERVAL '5';
log;
log GET_STATS106 clear;
obey get_stats_cmd;
log;
sh cat GET_STATS106 >> cumulative_GET_STATS106;
sh grep "Execute End Time" GET_STATS106 >> CANCEL_LOG106;
log CANCEL_LOG106;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel will cancel');

obey cancel_cmd;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel has canceled');

select 'canceler - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;
log;
sh cat CANCEL_LOG106 >> cancel_log106_all;
log CANCEL_FINAL_SYN106;
insert into t106_synch_cancel values( 199, 102, CURRENT_TIME(6));

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel is exiting');

log;

?section do_cancel_pname
log CANCEL_LOG106 clear;
------------------------------------------;
------ Contents of cancel session --------;
------------------------------------------;
insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel_pname has begun');

insert into t106_synch_cancel values( 99, 101, CURRENT_TIME(6));

select 'canceler going to sleep - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

sh sleep 13;

select 'canceler woke up - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

set session default CANCEL_ESCALATION_INTERVAL '5';
log;
log GET_STATS106 clear;
obey get_stats_cmd;
log;
sh cat GET_STATS106 >> cumulative_GET_STATS106;
sh grep "Execute End Time" GET_STATS106 >> CANCEL_LOG106;
log CANCEL_LOG106;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel_pname will cancel');

obey cancel_pname_cmd;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel_pname has canceled');

select 'canceler - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;
log;
sh cat CANCEL_LOG106 >> cancel_log106_all;
log CANCEL_FINAL_SYN106;
insert into t106_synch_cancel values( 199, 102, CURRENT_TIME(6));

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel is exiting');

log;

?section do_cancel_nid_pid
log CANCEL_LOG106 clear;
------------------------------------------;
------ Contents of cancel session --------;
------------------------------------------;
insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel_nid_pid has begun');

insert into t106_synch_cancel values( 99, 101, CURRENT_TIME(6));

select 'canceler going to sleep - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

sh sleep 13;

select 'canceler woke up - FUNKY_OPT_UNIQUE', 
CURRENT_TIME (6) from (values (1)) as t1;

set session default CANCEL_ESCALATION_INTERVAL '5';
log;
log GET_STATS106 clear;
obey get_stats_cmd;
log;
sh cat GET_STATS106 >> cumulative_GET_STATS106;
sh grep "Execute End Time" GET_STATS106 >> CANCEL_LOG106;
log CANCEL_LOG106;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel_nid_pid will cancel');

obey cancel_nid_pid_cmd;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel_nid_pid has canceled');

select 'canceler - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;
log;
sh cat CANCEL_LOG106 >> cancel_log106_all;
log CANCEL_FINAL_SYN106;
insert into t106_synch_cancel values( 199, 102, CURRENT_TIME(6));

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'do_cancel_nid_pid is exiting');

log;

?section lock_t106a
log LOCK_LOG106 ;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'lock_t106a has begun');

------------------------------------------;
------ Contents of locking session -------;
------------------------------------------;
begin work;
lock table t106a in exclusive mode;
insert into t106_synch_lock values( 1, 1, CURRENT_TIME(6));
sh sleep 21;
commit;

insert into T106_interleaved_log values
(CURRENT_TIME (6), 
'lock_t106a has committed');

select 'locker - FUNKY_OPT_UNIQUE', CURRENT_TIME (6) from (values (1)) as t1;
log;

?section make_suicide_script
-- Make a shell script to stop this mxci.
sh gtacl -c 'status *,term' | grep mxci | cut -c 12-19 | sed "s/^/sleep 8; gtacl -c 'stop/g" | sed "s/$/'/g">stop_cmd ; 
sh chmod +x stop_cmd;


?section make_cancel_stmt 
log;
log QIDLOG clear;
display qid for s1;

log;

sh grep "^QID is " QIDLOG | cut -c 8- | sed "s/^/control query cancel qid /g" | sed "s/$/;/g"  > cancel_cmd; 
sh grep "^QID is " QIDLOG | cut -c 8- | sed "s/^/get statistics for qid /g" | sed "s/$/;/g"  > get_stats_cmd; 


log LOG106;

?section make_cancel_pname_stmt 
log;
log QIDLOG clear;
display qid for s1;

log;

sh echo "control query default CANCEL_MINIMUM_BLOCKING_INTERVAL '1';" > cancel_pname_cmd;
sh grep "^  Pin:" QIDLOG | cut -c 8- | sed "s/^/sqps | grep sqlci | grep /g" | sh | cut -c 42-50 | sed "s/^/control query cancel pid /g" >> cancel_pname_cmd;
sh echo ";" >> cancel_pname_cmd;
sh grep "^QID is " QIDLOG | cut -c 8- | sed "s/^/get statistics for qid /g" | sed "s/$/;/g"  > get_stats_cmd;

log LOG106;

?section make_cancel_nid_pid_stmt 
log;
log QIDLOG clear;
display qid for s1;

log;

sh echo "control query default CANCEL_MINIMUM_BLOCKING_INTERVAL '1';" > cancel_nid_pid_cmd;
sh grep "^  Pin:" QIDLOG | cut -c 8- | sed "s/^/control query cancel pid 0,/g" >> cancel_nid_pid_cmd;
sh echo ";" >> cancel_nid_pid_cmd;
sh grep "^QID is " QIDLOG | cut -c 8- | sed "s/^/get statistics for qid /g" | sed "s/$/;/g"  > get_stats_cmd;

log LOG106;

?section append_cancel_log
log;
sh sleep 2;
sh cat CANCEL_LOG106 >> LOG106;
log LOG106;

?section append_lock_log
log;
sh sleep 2;
sh cat LOCK_LOG106 >> LOG106;
log LOG106;

?section privs
-- This section makes sure that the current user has privileges required
-- to perform the request. By default, a user belonging to roles DB__ADMIN
-- and DB__USERADMIN, and users DB__ROOT and DB__USERADMINUSER have privileges.
--
-- If the user does not have the privilege then error 1017 is returned.
-- If the user has the privilege then error 8026 is returned.
-- up until now, all the tests have been run by DB__ROOT.

-- Have DB__USERADMINUSER try to cancel a query (expect error 8026)
sh `which sqlci` -i "TEST106(privs_cancel_rqst)" -u DB__USERADMINUSER;

-- Test that sql_user5 who does not have the privilege fails, expect error 1017
sh `which sqlci` -i "TEST106(privs_suspend_rqst)" -u SQL_USER5;

-- grant the role DB__USERADMIN to sql_user5 and retry, 
-- this time error 8923 is returned
grant role DB__USERADMIN to sql_user5;
sh `which sqlci` -i "TEST106(privs_suspend_rqst)" -u SQL_USER5;
revoke role DB__USERADMIN from sql_user5;

-- this time sql_user7 does not have the privilege, expect error 1017
sh `which sqlci` -i "TEST106(privs_activate_rqst)" -u sql_user7;

-- Now grant the privilege to sql_user7, expect error 8923
grant component privilege QUERY_ACTIVATE on SQL_OPERATIONS to sql_user7;
sh `which sqlci` -i "TEST106(privs_activate_rqst)" -u sql_user7;
revoke component privilege QUERY_ACTIVATE on SQL_OPERATIONS from sql_user7;

-- Privilege has been revoked to sql_user7 no long has privilege, error 1017
sh `which sqlci` -i "TEST106(privs_activate_rqst)" -u sql_user7;

-- Grant a role the activate privilege, sql_user7 still fails, error 1017
create role exetest106;
grant component privilege QUERY_ACTIVATE on SQL_OPERATIONS to exetest106;
sh `which sqlci` -i "TEST106(privs_activate_rqst)" -u sql_user7;

-- Now grant the role to sql_user7, should work (error 8923)
grant role exetest106 to sql_user7;
sh `which sqlci` -i "TEST106(privs_activate_rqst)" -u sql_user7;
revoke role exetest106 from sql_user7;
revoke component privilege QUERY_ACTIVATE on SQL_OPERATIONS from exetest106;
drop role exetest106;

-- Test logic that re-compiles a stale cancel/suspend/activate.
cqd auto_query_retry_warnings 'on';
prepare s2 from control query suspend qid
MXID11000023943212197828612249700000000000206U6553500_20_S1;
sh sleep 2;
execute s2;
prepare s3 from control query suspend qid
MXID11000023943212197828612249700000000000206U6553500_20_S1;
execute s3;
cqd auto_query_retry_warnings 'reset';

?section privs_cancel_rqst
log LOG106;
control query cancel qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;
log;

?section privs_suspend_rqst
log LOG106;
control query suspend qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;
log;

?section privs_activate_rqst
log LOG106;
control query activate qid
MXID11000026954212168745269419968000000000217DEFAULT_MXCI_USER00_22_S1;
log;
